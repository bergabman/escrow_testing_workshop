/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { ESCROW_TESTING_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const TAKE_DISCRIMINATOR = new Uint8Array([
  149, 226, 52, 104, 6, 142, 230, 39,
]);

export function getTakeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TAKE_DISCRIMINATOR);
}

export type TakeInstruction<
  TProgram extends string = typeof ESCROW_TESTING_PROGRAM_ADDRESS,
  TAccountTaker extends string | AccountMeta<string> = string,
  TAccountMaker extends string | AccountMeta<string> = string,
  TAccountMintA extends string | AccountMeta<string> = string,
  TAccountMintB extends string | AccountMeta<string> = string,
  TAccountTakerAtaA extends string | AccountMeta<string> = string,
  TAccountTakerAtaB extends string | AccountMeta<string> = string,
  TAccountMakerAtaB extends string | AccountMeta<string> = string,
  TAccountEscrow extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTaker extends string
        ? WritableSignerAccount<TAccountTaker> &
            AccountSignerMeta<TAccountTaker>
        : TAccountTaker,
      TAccountMaker extends string
        ? WritableAccount<TAccountMaker>
        : TAccountMaker,
      TAccountMintA extends string
        ? ReadonlyAccount<TAccountMintA>
        : TAccountMintA,
      TAccountMintB extends string
        ? ReadonlyAccount<TAccountMintB>
        : TAccountMintB,
      TAccountTakerAtaA extends string
        ? WritableAccount<TAccountTakerAtaA>
        : TAccountTakerAtaA,
      TAccountTakerAtaB extends string
        ? WritableAccount<TAccountTakerAtaB>
        : TAccountTakerAtaB,
      TAccountMakerAtaB extends string
        ? WritableAccount<TAccountMakerAtaB>
        : TAccountMakerAtaB,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TakeInstructionData = { discriminator: ReadonlyUint8Array };

export type TakeInstructionDataArgs = {};

export function getTakeInstructionDataEncoder(): FixedSizeEncoder<TakeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: TAKE_DISCRIMINATOR })
  );
}

export function getTakeInstructionDataDecoder(): FixedSizeDecoder<TakeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTakeInstructionDataCodec(): FixedSizeCodec<
  TakeInstructionDataArgs,
  TakeInstructionData
> {
  return combineCodec(
    getTakeInstructionDataEncoder(),
    getTakeInstructionDataDecoder()
  );
}

export type TakeAsyncInput<
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountTakerAtaA extends string = string,
  TAccountTakerAtaB extends string = string,
  TAccountMakerAtaB extends string = string,
  TAccountEscrow extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  takerAtaA?: Address<TAccountTakerAtaA>;
  takerAtaB?: Address<TAccountTakerAtaB>;
  makerAtaB?: Address<TAccountMakerAtaB>;
  escrow: Address<TAccountEscrow>;
  vault?: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getTakeInstructionAsync<
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountTakerAtaA extends string,
  TAccountTakerAtaB extends string,
  TAccountMakerAtaB extends string,
  TAccountEscrow extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ESCROW_TESTING_PROGRAM_ADDRESS,
>(
  input: TakeAsyncInput<
    TAccountTaker,
    TAccountMaker,
    TAccountMintA,
    TAccountMintB,
    TAccountTakerAtaA,
    TAccountTakerAtaB,
    TAccountMakerAtaB,
    TAccountEscrow,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TakeInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountMintA,
    TAccountMintB,
    TAccountTakerAtaA,
    TAccountTakerAtaB,
    TAccountMakerAtaB,
    TAccountEscrow,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ESCROW_TESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    takerAtaA: { value: input.takerAtaA ?? null, isWritable: true },
    takerAtaB: { value: input.takerAtaB ?? null, isWritable: true },
    makerAtaB: { value: input.makerAtaB ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.takerAtaA.value) {
    accounts.takerAtaA.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.takerAtaB.value) {
    accounts.takerAtaB.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.makerAtaB.value) {
    accounts.makerAtaB.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintB.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.escrow.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mintA.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.takerAtaA),
      getAccountMeta(accounts.takerAtaB),
      getAccountMeta(accounts.makerAtaB),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getTakeInstructionDataEncoder().encode({}),
  } as TakeInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountMintA,
    TAccountMintB,
    TAccountTakerAtaA,
    TAccountTakerAtaB,
    TAccountMakerAtaB,
    TAccountEscrow,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type TakeInput<
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountMintA extends string = string,
  TAccountMintB extends string = string,
  TAccountTakerAtaA extends string = string,
  TAccountTakerAtaB extends string = string,
  TAccountMakerAtaB extends string = string,
  TAccountEscrow extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  mintA: Address<TAccountMintA>;
  mintB: Address<TAccountMintB>;
  takerAtaA: Address<TAccountTakerAtaA>;
  takerAtaB: Address<TAccountTakerAtaB>;
  makerAtaB: Address<TAccountMakerAtaB>;
  escrow: Address<TAccountEscrow>;
  vault: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getTakeInstruction<
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountMintA extends string,
  TAccountMintB extends string,
  TAccountTakerAtaA extends string,
  TAccountTakerAtaB extends string,
  TAccountMakerAtaB extends string,
  TAccountEscrow extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof ESCROW_TESTING_PROGRAM_ADDRESS,
>(
  input: TakeInput<
    TAccountTaker,
    TAccountMaker,
    TAccountMintA,
    TAccountMintB,
    TAccountTakerAtaA,
    TAccountTakerAtaB,
    TAccountMakerAtaB,
    TAccountEscrow,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TakeInstruction<
  TProgramAddress,
  TAccountTaker,
  TAccountMaker,
  TAccountMintA,
  TAccountMintB,
  TAccountTakerAtaA,
  TAccountTakerAtaB,
  TAccountMakerAtaB,
  TAccountEscrow,
  TAccountVault,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ESCROW_TESTING_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    mintA: { value: input.mintA ?? null, isWritable: false },
    mintB: { value: input.mintB ?? null, isWritable: false },
    takerAtaA: { value: input.takerAtaA ?? null, isWritable: true },
    takerAtaB: { value: input.takerAtaB ?? null, isWritable: true },
    makerAtaB: { value: input.makerAtaB ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.mintA),
      getAccountMeta(accounts.mintB),
      getAccountMeta(accounts.takerAtaA),
      getAccountMeta(accounts.takerAtaB),
      getAccountMeta(accounts.makerAtaB),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getTakeInstructionDataEncoder().encode({}),
  } as TakeInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountMintA,
    TAccountMintB,
    TAccountTakerAtaA,
    TAccountTakerAtaB,
    TAccountMakerAtaB,
    TAccountEscrow,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedTakeInstruction<
  TProgram extends string = typeof ESCROW_TESTING_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    taker: TAccountMetas[0];
    maker: TAccountMetas[1];
    mintA: TAccountMetas[2];
    mintB: TAccountMetas[3];
    takerAtaA: TAccountMetas[4];
    takerAtaB: TAccountMetas[5];
    makerAtaB: TAccountMetas[6];
    escrow: TAccountMetas[7];
    vault: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
  };
  data: TakeInstructionData;
};

export function parseTakeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTakeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      taker: getNextAccount(),
      maker: getNextAccount(),
      mintA: getNextAccount(),
      mintB: getNextAccount(),
      takerAtaA: getNextAccount(),
      takerAtaB: getNextAccount(),
      makerAtaB: getNextAccount(),
      escrow: getNextAccount(),
      vault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getTakeInstructionDataDecoder().decode(instruction.data),
  };
}

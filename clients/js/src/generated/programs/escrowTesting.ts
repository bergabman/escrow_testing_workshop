/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedMakeInstruction,
  type ParsedRefundInstruction,
  type ParsedTakeInstruction,
} from '../instructions';

export const ESCROW_TESTING_PROGRAM_ADDRESS =
  'DbdVT243qJMcPrZz6J2BKGn6s8jgRJFfTJttbwnCm9nA' as Address<'DbdVT243qJMcPrZz6J2BKGn6s8jgRJFfTJttbwnCm9nA'>;

export enum EscrowTestingAccount {
  Escrow,
}

export function identifyEscrowTestingAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EscrowTestingAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([31, 213, 123, 187, 186, 22, 218, 155])
      ),
      0
    )
  ) {
    return EscrowTestingAccount.Escrow;
  }
  throw new Error(
    'The provided account could not be identified as a escrowTesting account.'
  );
}

export enum EscrowTestingInstruction {
  Make,
  Refund,
  Take,
}

export function identifyEscrowTestingInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EscrowTestingInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 227, 232, 77, 223, 166, 96, 197])
      ),
      0
    )
  ) {
    return EscrowTestingInstruction.Make;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([2, 96, 183, 251, 63, 208, 46, 46])
      ),
      0
    )
  ) {
    return EscrowTestingInstruction.Refund;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 226, 52, 104, 6, 142, 230, 39])
      ),
      0
    )
  ) {
    return EscrowTestingInstruction.Take;
  }
  throw new Error(
    'The provided instruction could not be identified as a escrowTesting instruction.'
  );
}

export type ParsedEscrowTestingInstruction<
  TProgram extends string = 'DbdVT243qJMcPrZz6J2BKGn6s8jgRJFfTJttbwnCm9nA',
> =
  | ({
      instructionType: EscrowTestingInstruction.Make;
    } & ParsedMakeInstruction<TProgram>)
  | ({
      instructionType: EscrowTestingInstruction.Refund;
    } & ParsedRefundInstruction<TProgram>)
  | ({
      instructionType: EscrowTestingInstruction.Take;
    } & ParsedTakeInstruction<TProgram>);
